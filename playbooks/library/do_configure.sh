#!/bin/bash
#
# (c) 2017 MapR Technologies, Inc. All Rights Reserved.
#
# Begin autogenerated shell template

if [ -n "$DEBUG" ] && [ "$DEBUG" -eq 1 ]; then
    set -x
    exec 2> /tmp/do_cfg_$$.out
fi

SED_EXP="s/\s?\([^=]+\)\s?=\s?\(\x22\([^\x22]+\)\x22|\x27\([^\x27]+\)\x27|\(\S+\)\)\s?/\1='\2'/p"
[ -n "${1}"  -a  -f "${1}" ] && eval $(sed -e ${SED_EXP} $1)

function exit_change() {
    exit_helper "\"changed\":true, " "$@"
}

function exit_no_change() {
    exit_helper "\"changed\":false, " "$@"
}

function exit_fail() {
    exit_helper "\"failed\":true, " "$@"
}

function exit_helper() {
    [ -n "${LOGLINES}" ] && log_lines=", \"mapr_logs\":\"${LOGLINES}\""
    echo "{ $1 \"msg\":\"$2\" ${log_lines} }"
    exit 0
}

function LOG() {
    local msg="$@"
    [ "INFO" != "$1" -a "ERROR" != "$1" -a "WARN" != "$1" ] && msg="INFO $@"
    local print_var="$(date +"%F %T %Z") $LOG_LEVEL $(echo "$msg"|tr '\n' ' '|tr '\r' ' '|tr '\"' ' '|tr "\'" ' '|tr '\000-\037' ' ')"
    [ -n "${LOGLINES}" ] && print_var="${LOGLINES}\n${print_var}"
    printf -v LOGLINES "%s" "${print_var}"
}

function LOG_ERROR() {
    LOG "ERROR" "$@"
}

function LOG_INFO() {
    LOG "INFO" "$@"
}

function LOG_WARN() {
    LOG "WARN" "$@"
}

function LOG_RUN_CMD() {
    local cmdstr="$(echo "$@" | cut -d' ' -f1)"
    run_cmd "$@"
    show_cmd_res "$@"
    echo "$@" | grep -q "timeout -s HUP" && check_timeout "$cmdstr" $CMD_RET
}

function run_cmd() {
    local cmd="$@"
    CMD_RES="$(eval $cmd 2>&1)"
    CMD_RET=$?
}

function show_cmd_res() {
    local msg="Command: $@, Status: ${CMD_RET}, Result: ${CMD_RES}"
    [ $CMD_RET -eq 0 ] && LOG_INFO $msg  || LOG_ERROR $msg
}

function exit_with_cmd_ret() {
    local ret=$1
    [ -z "$ret" ] && ret=$CMD_RET
    local script_name="$(basename $0)"
    [ $ret -eq 0 ] && exit_change "${script_name} passed" || exit_fail "${script_name} failed"
}

function run_with_retry() {
    RETRY_SLEEP=${RETRY_SLEEP:-1}
    RETRY_TOTAL=${RETRY_TOTAL:-1}
    local rem_time=$RETRY_TOTAL
    while [ $rem_time -gt 0 ] ; do
        run_cmd "$@"
        [ $CMD_RET -eq 0 ] && break
        sleep $RETRY_SLEEP
        rem_time=$[rem_time - $RETRY_SLEEP]
    done
    show_cmd_res "$@"
    [ $CMD_RET -ne 0 ] && LOG_ERROR "command failed after waiting ${RETRY_TOTAL} seconds, sleeping ${RETRY_SLEEP} seconds between each retry"
}

function get_timeout() {
    local val
    [ -n "$1" ] && val="$1" || val="2"
    local unit
    [ -n "$2" ] && unit="$2" || unit="m"
    type timeout > /dev/null 2>&1 && TIMEOUT="timeout -s HUP ${val}${unit}" || LOG_WARN "timeout cmd not found"
}

function check_timeout() {
    local retval
    local cmdstr=""
    [ -n "$1" ] && cmdstr="($1)"
    [ -n "$2" ] && retval=$2 || retval=$?
    [ $retval -eq 124 ] && LOG_WARN $1 "Command${cmdstr} timed out "
}

[ $(id -u) -ne 0 ] && SUDO="sudo"

LOG "Running $(basename $0)"
# End autogenerated shell template
# For debug
#set -x
# END
[ -z "${MAPR_HOME}" ] && exit 1
MAPR_USER=${MAPR_USER:-mapr}
MAPR_GROUP=${MAPR_GROUP:-mapr}
MAPRDB=${MAPRDB:-"NONE"}
DARE=${DARE:-0}
SECURITY=${SECURITY:-disabled}
ES_SECURITY=${ES_SECURITY:-disabled}
export GRAFANA_ADMIN_PASSWORD=${GRAFANA_PW:-admin}
export ES_ADMIN_PASSWORD=${ES_PW:-admin}
# could not use "disabled" to check against as we sometimes come in 
# with "False"
if [ "$SECURITY" == "enabled" ] || [ "$SECURITY" == "master" ]; then
    export GRAFANA_ADMIN_ID="${MAPR_USER}"
else
    export GRAFANA_ADMIN_ID="admin"
fi
LOG "SECURITY=$SECURITY GRAFANA_ADMIN_ID=$GRAFANA_ADMIN_ID"
YARN=${YARN:-}
ES_DB=${ES_DB:-${MAPR_HOME}/es_db}
CONTROL_GROUP_CHANGED=${CONTROL_GROUP_CHANGED:-0}
SSO_KEYCLOAK=${SSO_KEYCLOAK:-0}
LICENSE_MODULES=${LICENSE_MODULES:-DATABASE,HADOOP}
LICENSE_TYPE=${LICENSE_TYPE:-M3}
REFRESH_ROLES=${REFRESH_ROLES:-0}
RESTART_ECO=${RESTART_ECO:-0}
NOAUTO_START=${NOAUTO_START:-1}
METERING_CONFIG_ONLY=${METERING_CONFIG_ONLY:-0}
FRESH_INSTALL=${FRESH_INSTALL:-1}
TIMEOUT_CONFIGURE=${TIMEOUT_CONFIGURE:-10}
TIMEOUT_MAPRCLI=${TIMEOUT_MAPRCLI:-2}
SSL_KEYSTORE="/opt/mapr/conf/ssl_keystore"
HM_OPTS=""
get_timeout "$TIMEOUT_MAPRCLI"
MAPRCLI="sudo -E -n -u $MAPR_USER $TIMEOUT ${MAPR_HOME}/bin/maprcli"

LOG "CLUSTERNAME=$CLUSTERNAME "\
    "LICENSE=$LICENSE_TYPE:$LICENSE_MODULES CLDBNODES=$CLDBNODES "\
    "ZKNODES=$ZKNODES ESNODES=$ESNODES OTNODES=$OTNODES HMNODES=$HMNODES"

cldbnodes="$(echo $CLDBNODES | tr -d "[]")"
zknodes="$(echo $ZKNODES | tr -d "[]")"
rmnodes="$(echo $CLDBNODES | tr -d "[]")"
esnodes="$(echo $ESNODES | tr -d "[]")"
otnodes="$(echo $OTNODES | tr -d "[]")"
hmnodes="$(echo $HMNODES | tr -d "[]")"

# We need a few more details to handle configuration based on version
ver=0.0.0
[ -f "$MAPR_HOME/MapRBuildVersion" ] && ver=$(cat "$MAPR_HOME/MapRBuildVersion")
mapr_major_version=${ver%%.*}
ver=${ver#*.}
mapr_minor_version=${ver%%.*}
ver=${ver#*.}
mapr_triple_version=${ver%%.*}
mapr_version="${mapr_major_version}${mapr_minor_version}${mapr_triple_version}"

mapr_autostart_arg="-f -no-autostart -on-prompt-cont y"
mapr_metrics_arg=
mapr_yarn_arg=
verbose_flag="-v"

if [ -n "$NORECALC" ] && [ "$NORECALC" = "1" ] && [ "$mapr_version" -gt 510 ]; then
    RECALC_OPT="--noRecalcMem"
else
    RECALC_OPT=""
fi
if [ "${SECURITY:-}" = "master" ]; then
    mapr_sec_arg="-secure"
    if [ "$CONTROL_GROUP_CHANGED" -ne 1 ]; then
        mapr_sec_arg="$mapr_sec_arg -genkeys"
    fi
    if [ "$mapr_version" -gt 740 ] && [ "$SSO_KEYCLOAK" -eq 1 ]; then
        mapr_sec_arg="$mapr_sec_arg -keycloak"
    fi
    if [ -f "$SSL_KEYSTORE" ]; then
        mapr_sec_arg="$mapr_sec_arg -nocerts"
    fi
    if [ "$DARE" -eq 1 ]; then
        mapr_sec_arg="$mapr_sec_arg -dare"
    fi
elif [ "${SECURITY:-}" = "enabled" ]; then
    mapr_sec_arg="-secure"
    if [ "$DARE" -eq 1 ]; then
        mapr_sec_arg="$mapr_sec_arg -dare"
    fi
else
    mapr_sec_arg="-unsecure"
fi

# disable MapR-DB memory allocation if not licensed
[ -n "${LICENSE_MODULES##*DATABASE*}" ] && [ -n "${LICENSE_MODULES##*STREAMS*}" ] && mapr_db_arg="-noDB" || mapr_db_arg=""
if [ "${YARN:-}" = "True" ]; then
    mapr_yarn_arg=""
    [ ! -z "${HISTORYSERVER_HOST}" ] && mapr_yarn_arg="-HS ${HISTORYSERVER_HOST}"
    [ ! -z "${TIMELINESERVER_HOST}" ] && mapr_yarn_arg="-TL ${TIMELINESERVER_HOST} ${mapr_yarn_arg}"
    [ "$mapr_version" -eq 401 ] && mapr_yarn_arg="-RM $rmnodes ${mapr_yarn_arg}"
fi

if [ -n "$METRICS_DATABASE_HOST" ]; then
    mapr_metrics_arg="-d $METRICS_DATABASE_HOST:${METRICS_DATABASE_PORT} -du $METRICS_DATABASE_USER -dp $METRICS_DATABASE_PASSWORD -ds $METRICS_DATABASE_NAME"
fi

# Configure.sh wants JAVA_HOME set in order to find
# some system utilities. We'll use env.sh to get that set.
. "$MAPR_HOME"/conf/env.sh

if [ -n "$ESNODES" ]; then
    if [ -f "$MAPR_HOME/roles/elasticsearch" ]; then
        for es_dir in $(echo $ES_DB | sed -e 's/\,/ /g'); do
            LOG "checking to see if es_dir $es_dir exist"
            if [ ! -e "$es_dir" ]; then
                mkdir -p $es_dir > /dev/null 2>&1
                chown $MAPR_USER:$MAPR_GROUP $es_dir
            fi
        done
    fi
    ES_OPTS=" -ES $esnodes -ESDB $ES_DB "
    if [ "${ES_SECURITY:-}" = "master" -a \( "${SECURITY:-}" = "enabled" -o "${SECURITY:-}" = "master" \) ]; then
        ES_OPTS="$ES_OPTS -EPelasticsearch -genESKeys"
    fi
fi

[ -n "$OTNODES" ] && OT_OPTS=" -OT $otnodes "

if [ -n "$HMNODES" ] && [ "$mapr_version" -ge 610 ]; then
    HM_OPTS=" -hiveMetastoreHost $hmnodes"
    CMN_ECO_OPTS=" -EC"
fi

# XXX Temporarily fix bug in configure.sh
if ! fgrep -q FixedCheckIPInLis $MAPR_HOME/server/configure.sh ; then
    cp $MAPR_HOME/server/configure.sh $MAPR_HOME/server/configure.sh.sv_fix > /dev/null 2>&1
    sed -i -e "s/regex=\$currentIP'\[\[:space:\],:\\\$\]'/local host/;s/ *\[\[ \$1 =~ \$regex \]\]/  local ip/;s/ *return \$?/  \[\[ -z \"\$1\" \]\] \&\& return 1\n  for host in \${1\/\/,\/ } \; do\n    ip=\$\(getIpAddress \${host%%:\*}\)\n    \[\[ \$ip = \$currentIP \]\]\n    \[ \$? -eq 0 \] \&\& return 0\n    shift 1\n  done\n  return 1\n  \#\# FixedCheckIPInList/;s/# ConstructMapRMonitoringConfFile/ ConstructMapRMonitoringConfFile/" $MAPR_HOME/server/configure.sh
fi
# XXX Temporarily fix bug in configure-common.sh
#     make sure /opt/mapr/conf/conf.d exist before warden starts
if grep -q 'mkdir -p \"\${INSTALL_DIR}/conf\"$' $MAPR_HOME/server/configure-common.sh ; then
    cp $MAPR_HOME/server/configure-common.sh $MAPR_HOME/server/configure-common.sh.sv_fix > /dev/null 2>&1
    sed -i -e 's/mkdir -p \"\${INSTALL_DIR}\/conf\"/mkdir -p \"\${INSTALL_DIR}\/conf\/conf\.d\"/' $MAPR_HOME/server/configure-common.sh
fi
[ -n "$cldbnodes" ] && cldb_arg=" -C $cldbnodes "
[ -n "$zknodes" ] && zk_arg=" -Z $zknodes "
[ "$NOAUTO_START" -eq 1 ] && auto_start_flag="-no-autostart"

CONTROL_ARGS=" $cldb_arg $zk_arg"
CONF_ARGS="${verbose_flag:-} ${auto_start_flag:-} ${mapr_yarn_arg:-} ${mapr_metrics_arg:-} $ES_OPTS $OT_OPTS"

if [ "$REFRESH_ROLES" -eq 1 ] && [ "$mapr_version" -ge 600 ]; then
    case "$MAPRDB" in
        "QS")
            CONF_ARGS="$CONF_ARGS -EPdrill -qsOnly";;
        "DRILLQS")
            CONF_ARGS="$CONF_ARGS -EPdrill -qsDrill";;
        "DRILL")
            CONF_ARGS="$CONF_ARGS -EPdrill -drillOnly";;
    esac
    if [ "$mapr_version" -gt 610 ]; then
        if [ -n "$METERING_CONFIG_ONLY" ] && [ "$METERING_CONFIG_ONLY" = "1" ] ; then
            CONF_ARGS="$CONF_ARGS -EPcollectd -minimal"
        else
            CONF_ARGS="$CONF_ARGS -EPcollectd -all"
        fi
    fi
fi

if [ "$REFRESH_ROLES" -eq 0 ]; then
    CONF_ARGS=" -N $CLUSTERNAME -u $MAPR_USER -g $MAPR_GROUP ${mapr_autostart_arg:-} ${mapr_sec_arg:-} ${mapr_db_arg:-} ${mapr_client_args:-} ${CONF_ARGS} ${CONTROL_ARGS}"
else
    CONF_ARGS=" $RECALC_OPT -R ${CONF_ARGS}"
    [ $CONTROL_GROUP_CHANGED -eq 1 ] && CONF_ARGS=" $CONF_ARGS $CONTROL_ARGS}"
fi
logfile="/tmp/cfg_r_$(date +"%m_%d_%y__%H_%M_%S").log"
LOG_INFO "Logging configure.sh results to $logfile"
get_timeout $TIMEOUT_CONFIGURE
# we cannot add the CMN_ECO_OPTS and HM_OPTS to CONF_ARGS above because we have to preserve the space
# separation in the option.
if [ -z "$HM_OPTS" ]; then
    $TIMEOUT $MAPR_HOME/server/configure.sh ${CONF_ARGS} &> $logfile
else
    $TIMEOUT $MAPR_HOME/server/configure.sh ${CONF_ARGS} $CMN_ECO_OPTS "$HM_OPTS" &> $logfile
fi
CONF_RET=$?
check_timeout "configure.sh" $CONF_RET
# hbase-* might have started before configure.sh sets pid dir
# kill dangling processes that cannot be managed by Warden
for pidfile in /tmp/hbase*.pid; do
    pid=$(cat $pidfile)
    LOG "killing unmanaged service $(basename $pidfile .pid):$pid"
    (kill $pid && sleep 2 && kill -9 $pid && rm -f $pidfile) 2> /dev/null
done

get_timeout $TIMEOUT_MAPRCLI
if [ "$RESTART_ECO" -ne 0 ]; then
    if [ -n "$METRICS_DATABASE_HOST" ]; then
        LOG_RUN_CMD $MAPRCLI node services -name hoststats -action restart -nodes $(hostname)
        [ $CMD_RET -ne 0 ] && LOG_WARN "Unable to restart hoststats"
    fi
    for role in $(ls -1 /opt/mapr/roles | egrep -v '^cldb|^fileserver|^hbinternal|^historyserver|^jobtracker|^metrics|^nfs|^nodemanager|^resourcemanager|^tasktracker|^webserver|^zookeeper'); do
        LOG "restarting $role role"
        [ "$role" = "storm-nimbus" ] && role=nimbus
        [ "$role" = "storm-supervisor" ] && role=supervisor
        LOG_RUN_CMD $MAPRCLI node services -name $role -action restart -nodes $(hostname)
        [ $CMD_RET -ne 0 ] && LOG_WARN "Unable to restart $role"
    done
fi
exit_with_cmd_ret $CONF_RET
